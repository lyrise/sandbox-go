// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/animal.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetNameArgument struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNameArgument) Reset()         { *m = GetNameArgument{} }
func (m *GetNameArgument) String() string { return proto.CompactTextString(m) }
func (*GetNameArgument) ProtoMessage()    {}
func (*GetNameArgument) Descriptor() ([]byte, []int) {
	return fileDescriptor_4538ed64c1fcfa12, []int{0}
}

func (m *GetNameArgument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNameArgument.Unmarshal(m, b)
}
func (m *GetNameArgument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNameArgument.Marshal(b, m, deterministic)
}
func (m *GetNameArgument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNameArgument.Merge(m, src)
}
func (m *GetNameArgument) XXX_Size() int {
	return xxx_messageInfo_GetNameArgument.Size(m)
}
func (m *GetNameArgument) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNameArgument.DiscardUnknown(m)
}

var xxx_messageInfo_GetNameArgument proto.InternalMessageInfo

func (m *GetNameArgument) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetNameResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNameResponse) Reset()         { *m = GetNameResponse{} }
func (m *GetNameResponse) String() string { return proto.CompactTextString(m) }
func (*GetNameResponse) ProtoMessage()    {}
func (*GetNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4538ed64c1fcfa12, []int{1}
}

func (m *GetNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNameResponse.Unmarshal(m, b)
}
func (m *GetNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNameResponse.Marshal(b, m, deterministic)
}
func (m *GetNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNameResponse.Merge(m, src)
}
func (m *GetNameResponse) XXX_Size() int {
	return xxx_messageInfo_GetNameResponse.Size(m)
}
func (m *GetNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNameResponse proto.InternalMessageInfo

func (m *GetNameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GetNameArgument)(nil), "api.GetNameArgument")
	proto.RegisterType((*GetNameResponse)(nil), "api.GetNameResponse")
}

func init() { proto.RegisterFile("api/animal.proto", fileDescriptor_4538ed64c1fcfa12) }

var fileDescriptor_4538ed64c1fcfa12 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2c, 0xc8, 0xd4,
	0x4f, 0xcc, 0xcb, 0xcc, 0x4d, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c,
	0xc8, 0x54, 0x52, 0xe4, 0xe2, 0x77, 0x4f, 0x2d, 0xf1, 0x4b, 0xcc, 0x4d, 0x75, 0x2c, 0x4a, 0x2f,
	0xcd, 0x4d, 0xcd, 0x2b, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0d, 0x62, 0xca, 0x4c, 0x51, 0x52, 0x85, 0x2b, 0x09, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0x15, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x05, 0x2b, 0xe2, 0x0c, 0x02, 0xb3, 0x8d, 0xec,
	0xb9, 0xd8, 0x1c, 0xc1, 0xc6, 0x0b, 0x99, 0x72, 0xb1, 0x43, 0x35, 0x08, 0x89, 0xe8, 0x25, 0x16,
	0x64, 0xea, 0xa1, 0xd9, 0x20, 0x85, 0x22, 0x0a, 0x33, 0x34, 0x89, 0x0d, 0xec, 0x2c, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x18, 0x0c, 0x2f, 0xaa, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnimalClient is the client API for Animal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnimalClient interface {
	GetName(ctx context.Context, in *GetNameArgument, opts ...grpc.CallOption) (*GetNameResponse, error)
}

type animalClient struct {
	cc *grpc.ClientConn
}

func NewAnimalClient(cc *grpc.ClientConn) AnimalClient {
	return &animalClient{cc}
}

func (c *animalClient) GetName(ctx context.Context, in *GetNameArgument, opts ...grpc.CallOption) (*GetNameResponse, error) {
	out := new(GetNameResponse)
	err := c.cc.Invoke(ctx, "/api.Animal/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimalServer is the server API for Animal service.
type AnimalServer interface {
	GetName(context.Context, *GetNameArgument) (*GetNameResponse, error)
}

// UnimplementedAnimalServer can be embedded to have forward compatible implementations.
type UnimplementedAnimalServer struct {
}

func (*UnimplementedAnimalServer) GetName(ctx context.Context, req *GetNameArgument) (*GetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}

func RegisterAnimalServer(s *grpc.Server, srv AnimalServer) {
	s.RegisterService(&_Animal_serviceDesc, srv)
}

func _Animal_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameArgument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimalServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Animal/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimalServer).GetName(ctx, req.(*GetNameArgument))
	}
	return interceptor(ctx, in, info, handler)
}

var _Animal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Animal",
	HandlerType: (*AnimalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _Animal_GetName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/animal.proto",
}
